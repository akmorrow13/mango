
<%@ val dictionary: String%>
<%@ val regions: String %>

<html xmlns="http://www.w3.org/1999/html">
<% render("templates/head.ssp") %>
<% render("navigation/navigation.ssp") %>
<% render("templates/sidebar.ssp") %>

<div id="main">
    <div class="chrChart"></div>
</div>


<script>
    <!-- Define Global Variables -->
    refVis("${dictionary}",fromOverall=true);
</script>


<script>
$( document ).ready(function() {
	home("${dictionary}", "${regions}");
});

function home(dictionary, regions){
	// Define the div for the tooltip
	dictionary= dictionary.split(",");
	var div = d3.select(".chrChart").append("div")
		.attr("class", "tooltip")
		.style("opacity", 0);
	//Render read summary visualization on the home screen at startup
	var namelist=[];
	var lengthlist=[];
	var totalLength=0;
	var dataset = [];
	var clickableRegions = [];

	// this verifies that regions is not just an empty string
	if (regions != "") {
		for(i = 0; i < regions.length; i++) {
			var region = regions[i];
			var range = region.split(":")[1].split("-");
			var name = region.split(":")[0];
			clickableRegions.push({name: name, range});
		}
	}

  // keeps track of names and indices
	var nameMap = [];

	for (i = 0; i < dictionary.length; i++) {
		var range = dictionary[i].split(":")[1].split("-");
		var length = parseInt(range[1]-range[0]);
		var name = dictionary[i].split(":")[0];
    nameMap[i] = name;
		// filter and store regions that overlap the current dictionary value. These
		//  will be printed on the home screen
		var relevantRegions = clickableRegions.filter(function(d) {return d.name == name});
		dataset.push({name: name, length: length, regions: relevantRegions});
		namelist.push(name);
		lengthlist.push(length);
		totalLength+=length;
	}

	// Sorting by numerical value and not lexical order
	dataset.sort(function(a, b){return b.length-a.length});

	// Can end range with d3.max(lengthlist) = 249250621 or something smaller (fit in screen)
	var x = d3.scale.linear()
		.domain([0, 120])
		.range([0, 150000]);

  var minBarWidth = 10;
  var hoverOpacity = 0.4; // opacity when hovering over bars
	var regionOpacity = hoverOpacity - 0.2; // opacity of discovery regions
  var labelWidth = 100;
	var labelPadding = 20;
	var chartWidth = $(".chrChart").width() - 20;
	var barWidth = chartWidth - labelWidth;
	// height of each chromosome bar
	var barHeight = 22;
	var chartHeight = barHeight * dictionary.length;

  var color = d3.scale.category20b();

	var svg = d3.select(".chrChart")
		.append('svg')
		.attr('overflow', 'scroll')
		.attr('height', chartHeight + 'px')
		.attr('width', chartWidth);

	var chart = svg.selectAll("g")
		.data(dataset).enter().append("g");

	var regions = chart.selectAll(".region").data(function(d) {return d.regions});

  // print text first so it hides behind rect in the case of overflow
	chart
		.append("text")
			.append('tspan')
			.attr("x", labelPadding +"px")
			.attr("y",function(d){return barHeight*nameMap.indexOf(d.name)})
			.attr("dy", "1.1em")
			.style('fill', 'black')
			.text(function(d) { return d.name; })
			.each(wrap)
		.on("mouseover", function(d) {
			d3.select(this).attr("fill-opacity", regionOpacity)
										 .style("cursor", "pointer");
			div.transition()
				.style("opacity", 0.9)
				.duration(200);
			div	.html(d.name)
			.style("left", (d3.event.pageX) + "px")
			.style("top", (d3.event.pageY - 48) + "px");
		})
		.on("mouseout", function(d) {
			d3.select(this).attr("fill-opacity", 1);
			div.transition()
				.style("opacity", 0)
				.duration(200);
		});

  // append bars
	chart
		.append("rect")
		.attr("class", "chr")
		.attr("fill", "white")
		.attr('fill', function(d) {
			return color(d.name);
		})
		.style("stroke", "black")
		.attr("x", labelWidth)
		.attr("y",function(d){return barHeight*nameMap.indexOf(d.name)})
		.attr("height", barHeight)
		.attr("width", function(d) { return Math.max(minBarWidth,(barWidth * d.length)/d3.max(lengthlist)); })
		.on("mouseover", function(d) {
			d3.select(this).attr("fill-opacity", hoverOpacity);
			div.transition()
				.duration(200)
				.style("opacity", .9);
			div	.html(d.name)
				.style("left", (d3.event.pageX) + "px")
				.style("top", (d3.event.pageY - 48) + "px");
			})
		.on("mouseout", function(d) {
			d3.select(this).attr('fill-opacity', 1);
			div.transition()
				.duration(500)
				.style("opacity", 0);
		});

  // append clickable discovery regions
	regions
		.enter().append("rect")
		.attr("class", "region")
		.attr("x", (function(d) { return labelWidth + (barWidth * d.range[0])/d3.max(lengthlist); }))
		.attr("y",function(d){return barHeight*nameMap.indexOf(d.name)})
		.attr("width", (function(d) { return (barWidth * (d.range[1] - d.range[0]))/d3.max(lengthlist); }))
		.attr("height", barHeight)
		.attr('fill', 'white')
		.attr('fill-opacity', regionOpacity)
		.on("mouseover", function(d) {
			d3.select(this).attr("fill-opacity", 1);
			div.transition()
				.style("opacity", 0.9)
				.duration(200);
			div	.html(d.name + ": <br/>"  + d.range[0] + " - " + d.range[1])
			.style("left", (d3.event.pageX) + "px")
			.style("top", (d3.event.pageY - 48) + "px");
		})
		.on("mouseout", function(d) {
			d3.select(this).attr("fill-opacity", regionOpacity);
			div.transition()
				.style("opacity", 0)
				.duration(200);
		});


	chart.on('click', function(d) {
		var start = Math.round(d.length/2.0);
		var end =  Math.round(d.length/2.0 +1000);
		var request = '/setContig/' + d.name + '?start=' + start + '&end=' + end;
		var xhr = new XMLHttpRequest();
		xhr.open('GET', request, true);
		xhr.send();
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4 && xhr.status == 200) {
				window.location = '/browser';
			}
		}
	});

	regions.on('click', function(d) {
		var start = Number(d.range[0]);
		var end =  Number(d.range[1]);
		var request = '/setContig/' + d.name + '?start=' + start + '&end=' + end;
		var xhr = new XMLHttpRequest();
		xhr.open('GET', request, true);
		xhr.send();
		d3.event.stopPropagation(); // disables trigger for whole chromosome parent click
		xhr.onreadystatechange = function() {
			if (xhr.readyState == 4 && xhr.status == 200) {
				window.location = '/browser';
			}
		}
  });

	// wraps svg text elements to hide overflow with ellipsis (...)
	function wrap() {
		var self = d3.select(this),
			textLength = self.node().getComputedTextLength(),
			textLength = self.node().getComputedTextLength(),
			text = self.text();
		while (textLength > (labelWidth - 2 * labelPadding) && text.length > 0) {
			text = text.slice(0, -1);
			self.text(text + '...');
			textLength = self.node().getComputedTextLength();
		}
	}
}

</script>
</html>