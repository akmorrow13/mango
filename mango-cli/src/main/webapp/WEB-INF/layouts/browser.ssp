<%@ val dictionary:     String  %>
<%@ val twoBitUrl:      String  %>
<%@ val genes:          Option[String] %>
<%@ val coverage:  Option[List[String]] %>
<%@ val reads:     Option[List[(String, Option[String])]] %>
<%@ val variants:  Option[List[(String, String)]] %>
<%@ val features:  Option[List[String]] %>
<%@ val contig: String %>
<%@ val start: String %>
<%@ val end: String %>



<html xmlns="http://www.w3.org/1999/html">
<% render("templates/head.ssp") %>
<% render("navigation/navigation.ssp", Map("isBrowser" -> true)) %>
<% render("templates/sidebar.ssp") %>

<div id="main">
    <div id="pileup"></div>
</div>


<script>
    <!-- Define Variables for Pileup.js -->
    var contig = '${contig}';
    var start = ${start};
    var end = ${end};

    var request = "/sequenceDictionary"
    var xhr = new XMLHttpRequest();
    xhr.open('GET', request, true);
    xhr.send();

    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            var contigList = JSON.parse(xhr.response);

            // add reference and genes
            var tracks = [
                {
                viz: pileup.viz.genome(),
                isReference: true,
                data: pileup.formats.twoBit({
                  url: '${twoBitUrl}'
                }),
                name: 'Reference'
                },
                {
                viz: pileup.viz.scale(),
                name: 'Scale'
                },
                {
                viz: pileup.viz.location(),
                name: 'Location'
                },
                #if (genes.isDefined)
                    {
                    viz: pileup.viz.genes(),
                    data: pileup.formats.bigBed({
                    url: '${genes.get}'
                    }),
                    name: 'Genes'
                    },
                #end
            ];

            // generate and add variants, if defined
            #if (variants.isDefined)
                #for (s <- variants.get)
                    var data = pileup.formats.variants({
                    url: '/variants/${s._1}',
                    samples: '${s._2}'.split(",")
                    })
                    tracks.push({
                    viz: pileup.viz.variants(),
                    data: data,
                    name: '${s._1}'
                    })
                    #if (s._2.length > 0)
                        tracks.push({
                        viz: pileup.viz.genotypes(),
                        data: data,
                        name: ''
                        })
                    #end
                #end
            #end

            // add coverage
            #if (coverage.isDefined)
                #for (s <- coverage.get)
                    tracks.push({
                    viz: pileup.viz.coverage(),
                    data: pileup.formats.coverage({
                    url: '/coverage/${s}'
                    }),
                    name: '${s}'
                    });
                #end
            #end

            // add features
            #if (features.isDefined)
                #for (s <- features.get)
                    tracks.push({
                    viz: pileup.viz.features(),
                    data: pileup.formats.features({
                    url: '/features/${s}'
                    }),
                    name: '${s}'
                    });
                #end
            #end

            // add reads
            #if (reads.isDefined)
                #for (s <- reads.get)
                    var data = pileup.formats.GAReadAlignment({
                        endpoint: '',
                        readGroupId: '${s._1}',
                        killChr: false
                    });
                    // track for coverage for reads
                    tracks.push({
                        viz: pileup.viz.coverage(),
                        data: data,
                        name: '${s._1}'
                    });
                    // track for reads
                    tracks.push({
                        viz: pileup.viz.pileup({
                            hideAlignments: true
                        }),
                        isReference: false,
                        data: data,
                        name: '${s._1}'
                    });
                #end
            #end

            var browser = pileup.create(document.getElementById('pileup'), {
                // go to one of the chromosomes in sequence dictionary
                range: {contig: contig, start: start, stop: end},
                tracks: tracks
            });

            <!-- Render sidebar for navigation -->
            refVis("${dictionary}", browser, fromOverall=false);
        }
    };
</script>

</html>
