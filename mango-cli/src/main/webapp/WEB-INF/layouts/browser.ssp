<% import org.bdgenomics.mango.models.MaterializedFile %>
<% import org.bdgenomics.adam.models.ReferenceRegion %>
<%@ val dictionary:     String  %>
<%@ val twoBitUrl:      String  %>
<%@ val genes:          Option[String] %>
<%@ val reads:     Option[List[MaterializedFile]] %>
<%@ val variants:  Option[Map[MaterializedFile, String]] %>     <!-- map of file name and samples to extract genotype ids/names -->
<%@ val features:  Option[List[(MaterializedFile, Boolean)]] %> <!-- if true, then the track should be a coverage track -->
<%@ val region: ReferenceRegion %>

<%@ val reads:     Option[List[MaterializedFile]] %>
<%@ val variants:  Option[Map[MaterializedFile, String]] %>     <!-- map of file name and samples to extract genotype ids/names -->
<%@ val features:  Option[List[(MaterializedFile, Boolean)]] %> <!-- if true, then the track should be a coverage track -->
<%@ val region: ReferenceRegion %>

<html xmlns="http://www.w3.org/1999/html">
<% render("templates/head.ssp") %>
<% render("navigation/navigation.ssp", Map("isBrowser" -> true)) %>
<% render("templates/sidebar.ssp") %>

<div id="main">
    <div id="pileup"></div>
</div>


<script>
    <!-- Define Variables for Pileup.js -->
    var contig = '${region.referenceName}';
    var start = '${region.start}';
    var end = '${region.end}';

    var request = "/sequenceDictionary"
    var xhr = new XMLHttpRequest();
    xhr.open('GET', request, true);
    xhr.send();

    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            var contigList = JSON.parse(xhr.response); <!-- TODO what is this for? -->

            // add reference and genes
            var tracks = [
                {
                viz: pileup.viz.genome(),
                isReference: true,
                data: pileup.formats.twoBit({
                  url: '${twoBitUrl}'
                }),
                name: 'Reference'
                },
                {
                viz: pileup.viz.scale(),
                name: 'Scale'
                },
                {
                viz: pileup.viz.location(),
                name: 'Location'
                },
                #if (genes.isDefined)
                    {
                    viz: pileup.viz.genes(),
                    data: pileup.formats.GAGene({
                        endpoint: '',
                        featureSetId: '${genes.get}'
                    }),
                    name: 'Genes'
                    },
                #end
            ];

            // generate and add variants, if defined
            #if (variants.isDefined)
                #for (s <- variants.get)

                    #if (!s._1.usesSpark)
                        var data = pileup.formats.vcf({
                            url: '${s._1.filePath}';
                        });
                    #else
                        var data = pileup.formats.GAVariant({
                            endpoint: '',
                            variantSetId: '${s._1.getKey()}',
                            callSetIds: '${s._2}'.split(","),
                            callSetNames:  '${s._2}'.split(",")
                        });
                    #end

                    tracks.push({
                        viz: pileup.viz.variants(),
                        data: data,
                        name: '${s._1.getKey()}'
                    });
                    tracks.push({
                        viz: pileup.viz.genotypes(),
                        data: data,
                        name: ''
                    })
                #end
            #end

            // add features and coverage
            #if (features.isDefined)
                #for (s <- features.get)

                    #if (!s._1.usesSpark)
                        var data = pileup.formats.bigBed({
                            url: '${s._1.filePath}'
                        });
                    #else
                        var data = pileup.formats.GAFeature({
                            endpoint: '',
                            featureSetId: '${s._1.getKey()}'
                        });
                    #end

                    #if (s._2 == true)
                        tracks.push({
                            viz: pileup.viz.coverage(),
                            data: data,
                            name: '${s._1.getKey()}'
                        });
                    #else
                        tracks.push({
                            viz: pileup.viz.features(),
                            data: data,
                            name: '${s._1.getKey()}'
                        });
                    #end
                #end
            #end

            // add reads
            #if (reads.isDefined)
                #for (s <- reads.get)
                    console.log('${s.filePath}');
                    console.log('${s.usesSpark}');

                    #if (!s.usesSpark)
                        var data = pileup.formats.bam({
                            url: '${s.filePath}',
                            indexUrl: '${s.indexPath.get}'
                        });
                    #else
                        var data = pileup.formats.GAReadAlignment({
                            endpoint: '',
                            readGroupId: '${s.getKey()}',
                            killChr: false
                        });
                    #end

                    // track for coverage for reads
                    tracks.push({
                        viz: pileup.viz.coverage(),
                        data: data,
                        name: '${s.getKey()}'
                    });
                    // track for reads
                    tracks.push({
                        viz: pileup.viz.pileup({
                            hideAlignments: false
                        }),
                        isReference: false,
                        data: data,
                        name: '${s.getKey()}'
                    });
                #end
            #end

            var browser = pileup.create(document.getElementById('pileup'), {
                // go to one of the chromosomes in sequence dictionary
                range: {contig: contig, start: start, stop: end},
                tracks: tracks
            });

            <!-- Render sidebar for navigation -->
            refVis("${dictionary}", browser, fromOverall=false);
        }
    };
</script>

</html>
