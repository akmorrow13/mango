/**
 * This module defines a parser for the 2bit file format.
 * See http://genome.ucsc.edu/FAQ/FAQformat.html#format7
 * 
 */
'use strict';var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}var _q = require(



'q');var _q2 = _interopRequireDefault(_q);var _underscore = require(
'underscore');var _underscore2 = _interopRequireDefault(_underscore);var _jbinary = require(
'jbinary');var _jbinary2 = _interopRequireDefault(_jbinary);var 






Sequence = (function () {



  function Sequence(remoteRequest, contigList) {_classCallCheck(this, Sequence);
    this.remoteRequest = remoteRequest;
    this.contigList = contigList;}


  // Returns a list of contig names.
  _createClass(Sequence, [{ key: 'getContigList', value: function getContigList() {
      return contigList.map(function (seq) {return seq.name;});}


    /**
     * Returns the base pairs for contig:start-stop.
     * The range is inclusive and zero-based.
     * Returns empty string if no data is available on this range.
     */ }, { key: 'getFeaturesInRange', value: 
    function getFeaturesInRange(contig, start, stop) {
      if (start > stop) {
        throw 'Requested a range with start > stop (' + start + ', ' + stop + ')';}


      return this.remoteRequest.get(contig, start, stop).then(function (buffer) {
        var dataView = new DataView(buffer);
        return markUnknownDNA(
        unpackDNA(dataView, start % 4, stop - start + 1), start, header).
        join('');});} }]);return Sequence;})();





module.exports = Sequence;